{"version":3,"sources":["webpack:///./src/views/master/category-create.vue?8ce9","webpack:///src/views/master/category-create.vue","webpack:///./src/views/master/category-create.vue?9eae","webpack:///./src/views/master/category-create.vue","webpack:///./src/graphql/category.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","staticClass","scopedSlots","_u","key","fn","passes","on","$event","preventDefault","onSubmit","attrs","$apollo","queries","errors","model","value","category","callback","$$v","$set","expression","loading","reset","staticRenderFns","name","data","isActive","methods","$observe","$route","query","id","$router","push","$clear","$refs","observer","apollo","manual","result","variables","skip","component","GET_CATEGORIES","gql","GET_CATEGORY_BY_ID","UPSERT_CATEGORY","REMOVE_CATEGORY"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,qBAAqB,CAACE,IAAI,WAAWC,YAAY,MAAMC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,SAASL,GACzM,IAAIM,EAASN,EAAIM,OACjB,MAAO,CAACR,EAAG,OAAO,CAACS,GAAG,CAAC,OAAS,SAASC,GAAgC,OAAxBA,EAAOC,iBAAwBH,EAAOZ,EAAIgB,aAAa,CAACZ,EAAG,aAAa,CAACa,MAAM,CAAC,cAAc,gBAAgB,GAAK,cAAc,YAAY,mBAAoBjB,EAAIkB,QAAQC,QAAe,QAAEf,EAAG,UAAUA,EAAG,MAAM,CAACG,YAAY,wBAAwB,CAACH,EAAG,MAAM,CAACG,YAAY,eAAe,CAACH,EAAG,qBAAqB,CAACa,MAAM,CAAC,KAAO,OAAO,MAAQ,YAAYT,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,SAASL,GAClc,IAAIc,EAASd,EAAIc,OACjB,MAAO,CAAChB,EAAG,UAAU,CAACa,MAAM,CAAC,MAAQ,OAAO,KAAO,OAAO,OAASG,GAAQC,MAAM,CAACC,MAAOtB,EAAIuB,SAAa,KAAEC,SAAS,SAAUC,GAAMzB,EAAI0B,KAAK1B,EAAIuB,SAAU,OAAQE,IAAME,WAAW,uBAAuB,MAAK,MAAS,GAAGvB,EAAG,MAAM,CAACG,YAAY,eAAe,CAACH,EAAG,UAAU,CAACa,MAAM,CAAC,GAAK,aAAa,MAAQ,UAAUI,MAAM,CAACC,MAAOtB,EAAIuB,SAAiB,SAAEC,SAAS,SAAUC,GAAMzB,EAAI0B,KAAK1B,EAAIuB,SAAU,WAAYE,IAAME,WAAW,wBAAwB,GAAGvB,EAAG,MAAM,CAACG,YAAY,gBAAgBH,EAAG,WAAW,CAACa,MAAM,CAAC,QAAUjB,EAAI4B,SAASf,GAAG,CAAC,MAAQb,EAAI6B,SAASzB,EAAG,YAAY,CAACa,MAAM,CAAC,gBAAe,EAAK,OAASjB,EAAI4B,QAAQ,cAAa,GAAOf,GAAG,CAAC,gBAAgB,SAASC,GAAQd,EAAI4B,QAAQd,OAAY,IAAI,WACtsBgB,EAAkB,G,wBCoBtB,GACEC,KAAM,WACNC,KAAM,WACJ,MAAO,CACLT,SAAU,CACRQ,KAAM,GACNE,UAAU,GAEZL,SAAS,IAGbM,QAAS,CACPlB,SADJ,WACA,WACMf,KAAKkC,SACX,qBACQ,SAAR,OACQ,UAAR,kBACA,kBAGA,MACA,YAIQ,IAFR,EAEA,EAHA,KACA,eAGQ,EAAR,kBAIIN,MAAO,WACL,GAAI5B,KAAKmC,OAAOC,MAAMC,GACpB,OAAOrC,KAAKsC,QAAQC,KAAK,eAE3BvC,KAAKwC,OAAOxC,KAAKsB,UACjBtB,KAAKyC,MAAMC,SAASd,UAGxBe,OAAQ,CACNrB,SAAU,CACRc,MAAO,EAAb,KACMQ,QAAQ,EACRC,OAHN,YAGA,yBACalB,IAAS3B,KAAKsB,SAAW,OAAtC,OAAsC,CAAtC,iBAEMwB,UANN,WAOQ,MAAO,CACLT,GAAIrC,KAAKmC,OAAOC,MAAMC,KAG1BU,KAXN,WAYQ,OAAQ/C,KAAKmC,OAAOC,MAAMC,OC5EsU,I,YCOpWW,EAAY,eACd,EACAlD,EACA+B,GACA,EACA,KACA,KACA,MAIa,aAAAmB,E,gpCChBR,IAAMC,EAAiBC,IAAH,KAUdC,EAAqBD,IAAH,KAUlBE,EAAkBF,IAAH,KAWfG,EAAkBH,IAAH","file":"js/chunk-36882f0c.7fbbe633.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ValidationObserver',{ref:\"observer\",staticClass:\"box\",scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar passes = ref.passes;\nreturn [_c('form',{on:{\"submit\":function($event){$event.preventDefault();return passes(_vm.onSubmit)}}},[_c('PageHeader',{attrs:{\"header-text\":\"Cast Category\",\"to\":\"/categories\",\"link-text\":\"Category List\"}}),(_vm.$apollo.queries.loading)?_c('Loader'):_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-3\"},[_c('ValidationProvider',{attrs:{\"name\":\"Name\",\"rules\":\"required\"},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar errors = ref.errors;\nreturn [_c('c-input',{attrs:{\"label\":\"Name\",\"type\":\"text\",\"errors\":errors},model:{value:(_vm.category.name),callback:function ($$v) {_vm.$set(_vm.category, \"name\", $$v)},expression:\"category.name\"}})]}}],null,true)})],1),_c('div',{staticClass:\"column is-3\"},[_c('c-check',{attrs:{\"id\":\"cat_active\",\"label\":\"Active\"},model:{value:(_vm.category.isActive),callback:function ($$v) {_vm.$set(_vm.category, \"isActive\", $$v)},expression:\"category.isActive\"}})],1),_c('div',{staticClass:\"column is-6\"}),_c('BtnGroup',{attrs:{\"loading\":_vm.loading},on:{\"reset\":_vm.reset}}),_c('b-loading',{attrs:{\"is-full-page\":true,\"active\":_vm.loading,\"can-cancel\":false},on:{\"update:active\":function($event){_vm.loading=$event}}})],1)],1)]}}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <ValidationObserver class=\"box\" v-slot=\"{ passes }\" ref=\"observer\">\r\n    <form @submit.prevent=\"passes(onSubmit)\">\r\n      <PageHeader header-text=\"Cast Category\" to=\"/categories\" link-text=\"Category List\" />\r\n      <Loader v-if=\"$apollo.queries.loading\" />\r\n      <div class=\"columns is-multiline\" v-else>\r\n        <div class=\"column is-3\">\r\n          <ValidationProvider name=\"Name\" rules=\"required\" v-slot=\"{ errors }\">\r\n            <c-input v-model=\"category.name\" label=\"Name\" type=\"text\" :errors=\"errors\" />\r\n          </ValidationProvider>\r\n        </div>\r\n        <div class=\"column is-3\">\r\n          <c-check v-model=\"category.isActive\" id=\"cat_active\" label=\"Active\" />\r\n        </div>\r\n        <div class=\"column is-6\"></div>\r\n        <BtnGroup :loading=\"loading\" @reset=\"reset\" />\r\n      <b-loading :is-full-page=\"true\" :active.sync=\"loading\" :can-cancel=\"false\"></b-loading>\r\n      </div>\r\n    </form>\r\n  </ValidationObserver>\r\n</template>\r\n\r\n<script>\r\nimport { GET_CATEGORY_BY_ID, UPSERT_CATEGORY } from \"@/graphql/category\";\r\n\r\nexport default {\r\n  name: \"Category\",\r\n  data: function() {\r\n    return {\r\n      category: {\r\n        name: \"\",\r\n        isActive: true\r\n      },\r\n      loading: false\r\n    };\r\n  },\r\n  methods: {\r\n    onSubmit() {\r\n      this.$observe(\r\n        this.$apollo.mutate({\r\n          mutation: UPSERT_CATEGORY,\r\n          variables: {\r\n            ...this.category\r\n          }\r\n        })\r\n      ).then(\r\n        ({\r\n          data: {\r\n            addCategory: { id }\r\n          }\r\n        }) => {\r\n          this.category.id = id;\r\n        }\r\n      );\r\n    },\r\n    reset: function() {\r\n      if (this.$route.query.id) {\r\n        return this.$router.push(\"/categories\");\r\n      }\r\n      this.$clear(this.category);\r\n      this.$refs.observer.reset();\r\n    }\r\n  },\r\n  apollo: {\r\n    category: {\r\n      query: GET_CATEGORY_BY_ID,\r\n      manual: true,\r\n      result({ data, loading }) {\r\n        if (!loading) this.category = { ...data.category };\r\n      },\r\n      variables() {\r\n        return {\r\n          id: this.$route.query.id\r\n        };\r\n      },\r\n      skip() {\r\n        return !this.$route.query.id;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./category-create.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./category-create.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./category-create.vue?vue&type=template&id=2c454033&\"\nimport script from \"./category-create.vue?vue&type=script&lang=js&\"\nexport * from \"./category-create.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import gql from 'graphql-tag'\r\n\r\nexport const GET_CATEGORIES = gql`\r\n    query GetCategories($isActive: Boolean){\r\n        categories(isActive: $isActive){\r\n            id,\r\n            name,\r\n            isActive\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_CATEGORY_BY_ID = gql`\r\n    query GetCategory($id: String!){\r\n        category(id: $id){\r\n            id,\r\n            name,\r\n            isActive\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPSERT_CATEGORY = gql`\r\n    mutation AddCategory($id:String, $name: String!, $isActive: Boolean!){\r\n        addCategory(id: $id, name: $name, isActive: $isActive){\r\n            id,\r\n            name,\r\n            isActive\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport const REMOVE_CATEGORY = gql`\r\n    mutation RemoveCategories($id: String!){\r\n        deleteCategory(id: $id){\r\n            id,\r\n            name\r\n        }\r\n    }\r\n`\r\n"],"sourceRoot":""}